from django.db import models
from django.contrib import admin
from countries.models import Country
from django.utils.translation import ugettext_lazy as _
from django.conf import settings


#from sorl.thumbnail.admin import AdminImageMixin
#from sorl.thumbnail import ImageField
from django.contrib.auth.models import User

#from simple_history.models import HistoricalRecords
#from simple_history.admin import SimpleHistoryAdmin

from datetime import date,time
import datetime

from vessel.models import *

# Create your models here.

class Crew_detail(models.Model):
	crew_ID        =  models.AutoField(primary_key=True,editable = False)
	nickname       =  models.CharField('Nick Name',blank = True, null = True, max_length = 30,help_text ="This designates the Nick Name of the Crew")
	surname        =  models.CharField('Surname',max_length = 30,help_text ="This designates the Last name of the Crew")
	othernames     =  models.CharField('Othername(s)',max_length = 30,help_text ="This designates the othername(s) of the Crew")
	no_of_identity =  models.CharField('Number of Identity',max_length = 15, help_text ="Nature and No. of Identity document (seaman book)")
	age            =  models.PositiveIntegerField(blank = True, null = True,help_text ="Generated from date of birth")
	sex            =  models.CharField('Gender', choices =(("Male","Male"),("Female","Female")),max_length = 7)
	Nationality    =  models.ForeignKey(Country, default = "GH", related_name = "count")
	speciality     =  models.CharField('Rank', 
					   choices =(("Captain","Captain"),
                                                     ("Cook","Cook"),
                                                     ("Machine Head","Machine Head"),
                                                     ("Boat Swain","Boat Swain"),
                                                     ("Master","Master"),
                                                     ("Bosun","Bosun"),
                                                     ("Ch./Offr","Ch./offr"),
                                                     ("2nd./Offr","2nd./Offr"),
                                                     ("Ch./Engr","Ch./Engr"),
                                                     ("A.B-1","A.B-1"), 
                                                     ("A.B-2","A.B-2"),
                                                     ("A.B-3","A.B-3"),
                                                     ("Fitter","Fitter"),
                                                    
                                                     ("Supt./Engr","Supt./Engr"),
                                                     ("Sailor","Sailor")),
                                            max_length = 15)
	marital_status =  models.CharField('Marital Status', 
					   choices =(("Married","Married"),
                                                     ("Divorced","Divorced"),
                                                     ("Widowed","Widowed"),
                                                     ("Single","Single"),
                                                     ("Cohabiting","Cohabiting"),
                                                     ("Civil_Union","Civil_Union"),
                                                     ("Domestic_Partnership","Domestic Partnership")),
                                          max_length = 20)
	date_Of_birth  =  models.DateField(blank = True, null = True,help_text = "YYYY-MM-DD")
	place_Of_birth =  models.CharField("Place Of Birth", max_length = 30, blank = True, null = True, help_text="City/Town")
	religion       =  models.CharField('Religion', 
                                            choices =(("Christianity","Christianity"),
                                                      ("Islam","Islam"),
                                                      ("Buddhism","Buddhism"),
						      ("Hinduism","Hinduism"),
						      ("Judaism","Judaism"),
						      ("Rastafari_Movement","Rastafari Movement"),
						      ("Jainism","Jainism"),
						      ("Shinto","Shinto"),
						      ("Other","Other")),
					     max_length = 20)
	blood_group   = models.CharField('Blood Group', 
                                          choices =(("O+","O+"),
                                                    ("A+","A+"),
                                                    ("B+","B+"),
						    ("AB+","AB+"),
						    ("O-","O-"),
                                                    ("A-","A-"),
                                                    ("B-","B-"),
						    ("AB-","AB-")),
					     max_length = 3)
	res_Address    = models.TextField('Residential Address', max_length = 60,blank = True, null = True,help_text = "")
	next_of_kin    = models.TextField("Next of kin",blank = True, null = True,help_text = "NAME, ADDRESS( IF DIFFERENT), RELATIONSHIP,MOBILE")
	mobile         = models.CharField('Mobile', max_length = 30, blank = True, null = True,unique =  True, help_text = "")
        email          = models.EmailField('Email-address',blank = True, null = True)
        ship           = models.ForeignKey(Ship_details,blank = True, null = True)
        employment_date  = models.DateField(blank= True, null = True)
        thumbnail        = models.ImageField("Head-Shot",upload_to = "tmp", blank = True, null = True)
	date_registered  = models.DateTimeField (auto_now_add=True, blank =True, null = True)
     	date_updated     = models.DateTimeField (auto_now=True,blank =True, null = True)
	#history         = HistoricalRecords()


	class Meta:
		verbose_name 	    = "Crew Personal Details"
		verbose_name_plural = "Crews Personal Details"
		
        def thumbnail_(self):
              if self.thumbnail:
                 return u'<img src ="%s" />'%(self.thumbnail)
             
              else:
                 return False
        thumbnail_.short_description = 'thumbnail'
        thumbnail_.allow_tags = True

# FORMATTING CREW ID
	def crew_number(self):
    	      if self.crew_ID <= 9:
    	         return "Click to edit -- CREW000%s" %(self.crew_ID)
    	      elif self.crew_ID > 9 and self.crew_ID < 100:
    	         return "Click to edit -- CREW00%s" %(self.crew_ID)
    	      elif self.crew_ID > 99 and self.crew_ID <1000:
    	         return "Click to edit -- CREW0%s" %(self.crew_ID)
    	      elif self.crew_ID > 999:
    	         return "Click to edit -- CREW%s" %(self.crew_ID)
    	      else:
    	         return "Click to edit -- CREW%s" %(self.crew_ID)

	def crew_name(self):
		return '%s  %s' %(self.surname.upper(),self.othernames.upper())

	def __unicode__(self):
	      if self.crew_ID <= 9:
    	         return '[ CREW000%s ] %s' %(self.crew_ID, self.nickname.upper())
    	      elif self.crew_ID > 9 and self.crew_ID < 100:
    	         return '[ CREW00%s ] %s' %(self.crew_ID, self.nickname.upper())
    	      elif self.crew_ID > 99 and self.crew_ID <1000:
    	         return '[ CREW0%s ] %s' %(self.crew_ID, self.nickname.upper())
    	      elif self.crew_ID > 999:
    	         return '[ CREW%s ] %s' %(self.crew_ID, self.nickname.upper())
    	      else:
    	         return '[ CREW%s ] %s' %(self.crew_ID, self.nickname.upper())

	
	def Age(self):
		if self.date_Of_birth:
	                 min_allowed_dob = datetime(1900,01,01)
	         	 max_allowed_dob = datetime.now()
			 if int(self.date_Of_birth.strftime("%G")) >= int( min_allowed_dob.strftime("%G") ) and int(self.date_Of_birth.strftime("%G")) <= int(max_allowed_dob.strftime("%G")):
               			 self.age  = "%s" %(int(max_allowed_dob.strftime("%G"))-  int(self.date_Of_birth.strftime("%G")) )
               			 return "%s" %(self.age)
                             
			 else:
				 return "Invalid Date"
          	elif self.age and int(self.age[0:3])<=120:
	        	self.date_Of_birth = None
		        return True
	
	def save(self,*args,**kwargs):
		#self.presupuesto.total = self.presupuesto.calclular_total()
		#self.budget.total = self.budget.calclular_total() 
		self.Age() 
    		super(Crew_detail,self).save(*args, **kwargs)
		#self.presupuesto.save()
		return True
	
	
	
	def Full_name_(self):
              	return "%s %s " %(self.surname.upper(),self.othernames.upper())


		
class Crew_Certification(models.Model):
	module_number  =  models.AutoField(primary_key=True,editable = False)
	crew           =  models.ForeignKey(Crew_detail, related_name = "CREW",blank = False, null =  False, help_text = "Select a registered Crew")
	module_name    =  models.CharField('Module Name',max_length = 30,help_text ="This designates the certification name")
	description    =  models.TextField('Description',blank = True, null =  True, max_length = 100, help_text = "Certificate description")
	category       =  models.CharField('Category', 
					   choices =(("USCG","US Coast Guard"),
                                                     ("MEBA","MEBA"),
                                                     ("NCLA","NCLA"),
                                                     ("STCW-BASIC","STCW-BASIC"),
                                                     ("Vessel Specific","Vessel Specific"),
                                                     ("Medical Cert.","Medical Cert."),
                                                     ("Other","Other")),
                                          max_length = 20)
        other_category =  models.CharField(help_text ="if Other", max_length =30, blank = True, null=  True)
	issue_date     =  models.DateField(blank = True, null = True,help_text = "YYYY-MM-DD")
	expire_date    =  models.DateField(blank = True, null = True,help_text = "YYYY-MM-DD")
        date_added     =  models.DateTimeField (auto_now_add=True, blank =True, null = True)
     	date_updated   =  models.DateTimeField (auto_now=True,blank =True, null = True)
	#history = HistoricalRecords()



        def attachment(self):
              return "%s" %(self.crew_cert_file_set.count())

	def __unicode__(self):
    		return "%s" %(self.module_number)
	
	def Module_(self):
	        return "Click to edit -- Module # %s" %(self.module_number)
	
	
	class Meta:
		verbose_name 	    = "Crew Certification"
		verbose_name_plural = "Crew Certifications"
		
        
        def expire_status(self):
           if self.expire_date <= date.today():
                return False 
           else:
                return True
        expire_status.boolean = True 
        
        def crew_(self):
           return "%s, %s" %(self.crew.surname,self.crew.othernames)
        
        def thumbnail_(self):
              if self.thumbnail:
                 return u'<img src ="%s" />'%(self.thumbnail)
             
              else:
                 return False
        thumbnail_.short_description = 'thumbnail'
        thumbnail_.allow_tags = True

	def Description_(self):
	     return "%s" %(self.description)	              


               
class Crew_Cert_file(models.Model):
      file_number        = models.AutoField(primary_key=True)
      Upload_file        = models.FileField(upload_to='crewcertfiles',blank = True, null = True,help_text = "Click to upload scanned certificate or pdf ")
      certificate 			= models.ForeignKey(Crew_Certification,blank = True, null = True,help_text = "")
      date_added 			= models.DateTimeField (auto_now_add=True, blank =True, null = True)
      date_updated                      = models.DateTimeField (auto_now=True,blank =True, null = True)
      
      def __unicode__(self):
           return '%s'% unicode(self.file_number)
      
      def file_Number(self):
          return "Click to edit-- File #%s" %(self.file_number)
      
      def cert_(self):
          return "%s" % (self.certificate.module_name)
       
      class Meta:
		verbose_name = "Certificate Uploads"
		verbose_name_plural = "Certificates Uploads"               
               
                   
class FileInline(admin.TabularInline):
      model = Crew_Cert_file


class CertFileAdmin(admin.ModelAdmin):
      list_display =   ('file_Number','cert_')
      list_filter = ('date_added', 'date_updated')      


class crew_contract(models.Model):
       ID 		=  models.AutoField(primary_key=True,editable = False)
       crew             =  models.ForeignKey(Crew_detail, related_name ="KrewCont", blank = False, null =  False, help_text = "Select a registered Crew") 
       contract_title   =  models.CharField(max_length= 40, blank = True, null =  True)
       description      =  models.TextField(blank = True, null =  True)
       issue_by         =  models.CharField("Added By",max_length = 70, help_text = "Enter the name/contact of the person who issued the contract",blank= True,null=True)
       issued_date      =  models.DateField(blank=True,null=True)
       valid_until      =  models.DateField(blank=True,null=True)
       comment          =  models.TextField(blank=True, null = True, help_text ="enter when the contract was last renewed")
       date_added       =  models.DateTimeField (auto_now_add=True, blank =True, null = True)
       date_updated     =  models.DateTimeField (auto_now=True,blank =True, null = True)   
       
       
       def __unicode__(self):
    		return "%s" %(self.contract_title)
       
       def Module_(self):
	        return "Click to edit --> %s" %(self.ID )
       
       def crew_(self):
           return "%s, %s" %(self.crew.surname,self.crew.othernames)
       
       
       def expire_status(self):
           if self.valid_until <= date.today():
                return False 
           else:
                return True
       expire_status.boolean = True 
           
       class Meta:
		verbose_name 	    = "Crew Contract"
		verbose_name_plural = "Crew Contracts"
      
       def attachment(self):
                return "%s" %(self.contract_file_set.count())	
               
class Contract_file(models.Model):
      file_number        = models.AutoField(primary_key=True)
      Upload_file        = models.FileField(upload_to='crewContractfiles',blank = True, null = True,help_text = "Click to upload scanned certificate or pdf ")
      contract 			= models.ForeignKey(crew_contract,blank = True, null = True,help_text = "")
      date_added 		= models.DateTimeField (auto_now_add=True, blank =True, null = True)
      date_updated              = models.DateTimeField (auto_now=True,blank =True, null = True)
      
      def __unicode__(self):
           return '%s'% unicode(self.file_number)
      
      def file_Number(self):
          return "Click to edit-- File #%s" %(self.file_number)
      
      def cont_(self):
          return "%s" % (self.contract.contract_title)
       
      class Meta:
		verbose_name = "Contract Uploads"
		verbose_name_plural = "Contract Uploads/files"               
               
                   
class ContractInline(admin.TabularInline):
      model = Contract_file


class ContractFileAdmin(admin.ModelAdmin):
      list_display =   ('file_Number','cont_','date_added','date_updated')
      list_filter = ('date_added','contract','date_updated')      
           
           
           

class Crew_Admin(admin.ModelAdmin):
      list_display      =('crew_number','Full_name_','nickname','no_of_identity','speciality','res_Address','Nationality','mobile','date_Of_birth','age','sex','email')
      search_fields     = ['crew_ID','othernames','surname','nickname','email','mobile']
      list_filter       = ('speciality','date_registered','date_updated')
      ordering          = ('-date_updated',)
      date_hierarchy    = 'date_registered'
      fieldsets         = (    ('Personal details', {'fields':(('surname','othernames'),('nickname','sex','marital_status'),('date_Of_birth','age','mobile'))}),
                    			     ('Other details',{'fields':('Nationality','res_Address',('place_Of_birth',
                    			                                  'religion','blood_group'),'next_of_kin')}),                          
					      ('Employment details',{ 'fields':('no_of_identity',('employment_date','ship'),'speciality','email','thumbnail')}),)
      list_per_page     = 20
      readonly_fields   = ('age',)
      
      #class Media:
        #js = (settings.STATIC_URL+'js/tiny_mce/tiny_mce.js',
          #    settings.STATIC_URL+'js/tiny_mce/textarea.js',)


class Certificate_Admin(admin.ModelAdmin):
      list_display      =('Module_','crew_','module_name','Description_','attachment','category','issue_date','expire_date','expire_status','date_added','date_updated')
      search_fields     = ['module_number','^crew__surname','^crew__othernames','^crew__nickname','module_name','category']
      list_filter       = ('category','issue_date','expire_date','date_updated',)
      ordering          = ('-date_updated',)
      date_hierarchy    = 'date_added'
      fieldsets         = ( (None, {'fields':('crew','module_name','description','category','other_category','issue_date','expire_date')}),)
      list_per_page     = 20
      inlines           = [FileInline]
      #class Media:
        #js = (settings.STATIC_URL+'js/tiny_mce/tiny_mce.js',
       #       settings.STATIC_URL+'js/tiny_mce/textarea.js',)


class contract_Admin(admin.ModelAdmin):
      list_display      =('Module_','crew_','contract_title','description','attachment','issue_by','issued_date','expire_status','valid_until','comment','date_added','date_updated')
      
      obj = crew_contract()
      def save_model(self,request,obj,form,change):
		obj.issue_by  = request.user.username
		obj.save()
      
      search_fields     = ['ID','^crew__surname','^crew__othernames','^crew__nickname','contract_title']
      list_filter       = ('issued_date','valid_until','date_updated',)
      ordering          = ('-date_updated',)
      date_hierarchy    = 'date_added'
      list_per_page     = 20
      readonly_fields = ('issue_by',)
      inlines           = [ContractInline]

#admin.site.register(Contract_file,ContractFileAdmin)
#admin.site.register(Crew_Cert_file,CertFileAdmin)
admin.site.register(Crew_Certification,Certificate_Admin)
admin.site.register(Crew_detail,Crew_Admin)
admin.site.register(crew_contract,contract_Admin)
